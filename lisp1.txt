

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))
(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))
(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))


(define (not x)
  (if x #f #t))


(define (positive? x) (> x 0))

(define (negative? x) (> 0 x))

(define (remainder x y)
   (- x (* y (/ x y))))

(define (modulo x y)
   (cond ((or (and (positive? x) (negative? y))
              (and (positive? y) (negative? x)))
                  (if (zero? (remainder x y)) 0 (+ y (remainder x y))))
         (else (remainder x y))))

(define (length items)
  (define (length-iter a count)
    (if (null a)
        count
        (length-iter (cdr a) (+ 1 count))))
  (length-iter items 0))

(define true #t)

(define false #f)

(define (equal a b)
  (cond ((and (pair? a) (pair? b))
         (and (equal (car a) (car b)) 
             (equal (cdr a) (cdr b))))
        ((and (not (pair? a)) (not (pair? b)))
         (eq? a b))
        (else false)))




(define (member item x)
  (cond ((null x) false)
        ((equal item (car x)) x)
        (else (member item (cdr x)))))

(define (append list1 list2)
   (if (null list1)
       list2
       (cons (car list1) (append (cdr list1) list2))))

(define (reverse items) 
   (if (null (cdr items)) 
       items 
       (append (reverse (cdr items)) 
               (cons (car items) '()))))



(define (nth n items)
    (if(pair? items)
        (if (<= (+ n 1) (length items))   
            (if (eq? n 0)
                  (car items)
                  (nth (- n 1) (cdr items)))
             Nil)
    Error))
(define (assoc obj alst)
     (cond
          ((null alst) #f)
          ((equal obj (caar alst)) (car alst))
          (else (assoc obj (cdr alst)))))



(define SETQ setq)
(define LIST list)
(define CAR car)
(define CDR cdr)
(define CAAR caar)
(define CADR cadr)
(define CDAR cdar)
(define CDDR cddr)
(define NTH nth)
(define CONS cons)
(define REVERSE reverse)
(define APPEND append)
(define LENGTH length)
(define MEMBER member)
(define ASSOC assoc)
(define REMOVE remove)
(define SUBST subst)
(define ATOM atom)
(define NULL null)
(define NUMBERP numberp)
(define ZEROP zerop)
(define MINUSP minusp)
(define EQAUL equal)
(define STRINGP stringp)
(define PRINT print)
(define IF if)
(define COND cond)

            
