%option noyywrap

%{
	
    #include "lisp.tab.h"
	#include <string.h>
	
%}

digit [0-9]
number [+-]?{digit}+(\.{digit}+)?
func "+"|"-"|"*"|"div"|"^"|"SETQ"|"LIST"|"CAR"|"CDR"|"NTH"|"CONS"|"REVERSE"|"APPEND"|"LENGTH"|"MEMBER"|"ASSOC"|"REMOVE"|"SUBST"|"ATOM"|"NULL"|"NUMBERP"|"ZEROP"|"MINUSP"|"EQUAL"|"<"|">="|"STRINGP"
quit "(stop)"
letter [a-zA-Z]
symbol {letter}+
%%

{number} {
                yylval.dval = strtod(yytext, NULL);
                printf("lex: NUMBER dval = %lf\n", yylval.dval);
                return NUMBER;
            }



"(stop)"      {
                return QUIT;
            }
"cond"      {
                return COND;
            }

{func}      {
                yylval.sval = (char *) malloc(strlen(yytext)*sizeof(char));
                strcpy(yylval.sval, yytext);
				printf("lex: FUNC sval = %s\n", yylval.sval);
                return FUNC;
            }

{symbol}    {
                yylval.sval = (char *) malloc(strlen(yytext)*sizeof(char));
                strcpy(yylval.sval, yytext);
				printf("lex: SYMBOL\n");
                return SYMBOL;
            }

"("         {
				printf("lex: LPAREN\n");
                return LPAREN;
            }
")"         {
                printf("lex: RPAREN\n");
                return RPAREN;
            }
"'"			{
				printf("lex: LetList\n");
				return LETLIST;
				}
"\n"        {
				
                return EOL;
            }

[ \t]       {}; /* skip whitespace */

.           {};

%%